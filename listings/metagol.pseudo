L := { all literals of all clauses in B or E+ }
C := { set of metarules }

for d in 1, 2,... :
    H := {}
    I := { invented_d-1 } u ... u {}
    for e in (E+ u I): 
        if (H, B) ⊨ e: 
            continue
        while |H| <= d:
            m := metarule from C s.t. mgu(e, head(m)) = A        # non-det
            m := m/A
            for l in body(m):
                p := predicate from L s.t. mgu(l, p) = B        # non-det
                m := m/B
            m := generalize(m)
            H := H u { m }
    if exists no e in E- s.t. (H, B) ⊨ e:
        return H
        